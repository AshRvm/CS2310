CHIP CLA4PGIa  {
	//does not care about overflow or carry-out
	//CLA4PGIa takes in p, g, carry-in and outputs Si only

	//ci: carry-in
	IN 		p[4], g[4], ci;
	OUT		s[4];

	PARTS:
	//c0 = ci
	//c1
	AndOr(a0=p[0], a1=ci, b=g[0], out=c1);

	//c2
	And3(a=p[1], b=p[0], c=ci, out=p1p0c0);
	And(a=p[1],  b=g[0], out=p1g0);
	Or3(a=p1p0c0, b=p1g0, c=g[1], out=c2);

	//c3
	And4(a=p[2], b=p[1], c=p[0], d=ci, out=p2p1p0c0);
	And3(a=p[2], b=p[1], c=g[0], out=p1p0g0);
	And(a=p[2],  b=g[1], out=p2g1);
	Or4(a=p2p1p0c0, b=p1p0g0, c=p2g1, d=g[2], out=c3);

	//sum bits: Si = Pi xor Ci
	Xor(a=p[0], b=ci, out=s[0]);
	Xor(a=p[1], b=c1, out=s[1]);
	Xor(a=p[2], b=c2, out=s[2]);
	Xor(a=p[3], b=c3, out=s[3]);
}