CHIP MPLY8CSA  {
    IN  a[8], b[8];
    OUT p[8], of;

    PARTS:
    //pp(i) is ith partial product's 8 bits
    And8b1(a=a, b=b[0], out=pp0);
    And8b1(a=a, b=b[1], out=pp1);
    And8b1(a=a, b=b[2], out=pp2);
    And8b1(a=a, b=b[3], out=pp3);
    And8b1(a=a, b=b[4], out=pp4);
    And8b1(a=a, b=b[5], out=pp5);
    And8b1(a=a, b=b[6], out=pp6);
    //pp(i)s is ith partial product's MSB (sign)
    And(a=a[7], b=b[0], out=pp0s);
    And(a=a[7], b=b[1], out=pp1s);
    And(a=a[7], b=b[2], out=pp2s);
    And(a=a[7], b=b[3], out=pp3s);
    And(a=a[7], b=b[4], out=pp4s);
    And(a=a[7], b=b[5], out=pp5s);
    And(a=a[7], b=b[6], out=pp6s);

    //pp7 will be (~x) y7 2^7 + y7 w^7
    Not8(in=a, out=nota);
    And8b1(a=nota, b=b[7], out=pp7);
    And(a=a[7], b=b[6], out=pp7s);

    //level_0: (pp0 pp1 pp2) (pp3 pp4 pp5) (pp6 pp7 y72^7) -> s00 c00 s01 c01 s02 c02
    //we'll also take care about extending signs of ppi
    CSA16u(a[0..7]=pp0,  a[8]=pp0s,   a[9]=pp0s,   a[10]=pp0s,
           a[11]=pp0s,   a[12]=pp0s,  a[13]=pp0s,  a[14]=pp0s, a[15]=pp0s,
           b[1..8]=pp1,  b[9]=pp1s,   b[10]=pp1s,  b[11]=pp1s,
           b[12]=pp1s,   b[13]=pp1s,  b[14]=pp1s,  b[15]=pp1s,
           ci[2..9]=pp2, ci[10]=pp2s, ci[11]=pp2s, ci[12]=pp2s,
           ci[13]=pp2s,  ci[14]=pp2s, ci[15]=pp2s,
           s=s00, co[0..14]=c00);
    CSA16u(a[3..10]=pp3,  a[11]=pp3s,  a[12]=pp3s,  a[13]=pp3s,  a[14]=pp3s, a[15]=pp3s,
           b[4..11]=pp4,  b[12]=pp4s,  b[13]=pp4s,  b[14]=pp4s,  b[15]=pp4s,
           ci[5..12]=pp5, ci[13]=pp5s, ci[14]=pp5s, ci[15]=pp5s,
           s=s01, co[0..14]=c01);
    CSA16u(a[6..13]=pp6, a[14]=pp6s, a[15]=pp6s,
           b[7..14]=pp7, b[15]=pp7s,
           ci[7]=b[7], s=s02, co[0..14]=c02);

    //the other levels are the same as unsigned, thankfully
    //level_1: (s00 c00 s01) (c01 s02 c02) -> s10 c10 s11 c11
    CSA16u(a=s00,        b[1..15]=c00,  ci=s01,        s=s10, co[0..14]=c10);
    CSA16u(a[1..15]=c01, b=s02,         ci[1..15]=c02, s=s11, co[0..14]=c11);

    //level_2: (s10 c10 s11) c11 -> s20 c20 c11
    CSA16u(a=s10, b[1..15]=c10, ci=s11, s=s20, co[0..14]=c20);

    //level_3: (s20 c20 c11) -> s30 c30
    CSA16u(a=s20, b[1..15]=c20, ci[1..15]=c11, s=s30, co[0..14]=c30);

    //CLA16Adder:
    CLA164Ha(a=s30, b[1..15]=c30, AS=false, 
    		 s[0..7] = p,
    		 s[8] 	 = p8,
    		 s[9] 	 = p9,
    		 s[10]	 = p10,
    		 s[11]	 = p11,
    		 s[12]	 = p12,
    		 s[13]	 = p13,
    		 s[14]	 = p14,
    		 s[15]	 = p15);

    //////////      overflow      //////////
    //((x7 === y7) & (p8 + ... + p15)) + ((x7 xor y7) & (~p8 + ... + ~p15))

    //required terms for x7 === y7
    Not(in=a[7], out=na7);
    Not(in=b[7], out=nb7);

    And(a=a[7], b=b[7], out=a7b7);
    And(a=na7,  b=nb7,  out=na7nb7);

    //calculate x7 === y7, x7 xor y7
    Or(a=a7b7,  b=na7nb7, out=aeb);
    Xor(a=a[7], b=b[7],   out=axb);

    //invert pi (i > 7) for second term
    Not(in=p8,  out=np8);
    Not(in=p9,  out=np9);
    Not(in=p10, out=np10);
    Not(in=p11, out=np11);
    Not(in=p12, out=np12);
    Not(in=p13, out=np13);
    Not(in=p14, out=np14);
    Not(in=p15, out=np15);
    
    //generate the or terms (p8 + ... + p15), (~p8 + ... + ~p15)
    Or8t1(in[0]=p8,  in[1]=p9,  in[2]=p10,
          in[3]=p11, in[4]=p12, in[5]=p13,
          in[6]=p14, in[7]=false, out=p8t15);
    Or8t1(in[0]=np8,  in[1]=np9,  in[2]=np10,
          in[3]=np11, in[4]=np12, in[5]=np13,
          in[6]=np14, in[7]=false, out=np8t15);

    //AND to make each of the two components of overflow
    And(a=aeb, b=p8t15,  out=oft0);
    And(a=axb, b=np8t15, out=oft1);

    //OR the two components
    Or(a=oft0, b=oft1, out=of);
}